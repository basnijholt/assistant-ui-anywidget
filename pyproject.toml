[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-jupyter-builder>=0.5.0"]
build-backend = "hatchling.build"

[project]
name = "assistant-ui-anywidget"
description = "Interactive AI assistant widget with kernel access for Jupyter notebooks using anywidget"
requires-python = ">=3.10"
dynamic = ["version"]
maintainers = [{ name = "Bas Nijholt", email = "bas@nijho.lt" }]
license = { text = "MIT" }
dependencies = [
    "anywidget>=0.9.0",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "langgraph>=0.0.20",
    "langchain-community>=0.3.27",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.0",
    # Using custom branch until PR is merged: https://github.com/langchain-ai/langchain-google/pull/1056
    # Fixes Gemini API issue with AIMessage + tool_calls in conversation history
    "langchain-google-genai @ git+https://github.com/basnijholt/langchain-google.git@fix/gemini-aimessage-tool-calls-conversation-history#subdirectory=libs/genai",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Framework :: IPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Widget Sets",
    "Topic :: System :: Shells",
    "Typing :: Typed",
]
keywords = ["jupyter", "widget", "ai", "assistant", "chat", "kernel", "interactive", "anywidget"]

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
homepage = "https://github.com/basnijholt/assistant-ui-anywidget"
documentation = "https://github.com/basnijholt/assistant-ui-anywidget"
repository = "https://github.com/basnijholt/assistant-ui-anywidget"
issues = "https://github.com/basnijholt/assistant-ui-anywidget/issues"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab", "hatch-vcs", "hatch-jupyter-builder", "pytest", "pytest-cov", "pre-commit", "ruff", "mypy"]

# Dependency groups (recognized by `uv`). For more details, visit:
# https://peps.python.org/pep-0735/
[dependency-groups]
dev = ["watchfiles", "jupyterlab", "hatch-vcs", "hatch-jupyter-builder", "pytest", "pytest-cov", "pre-commit", "ruff", "mypy"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
artifacts = ["assistant_ui_anywidget/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["assistant_ui_anywidget/static/index.js"]
skip-if-exists = ["assistant_ui_anywidget/static/index.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "npm"
build_cmd = "build"
path = "frontend"
build_dir = "assistant_ui_anywidget/static"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=assistant_ui_anywidget",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["assistant_ui_anywidget", "."]
omit = [
    "tests/*",
    "test_*",
    "*/__pycache__/*",
    "frontend/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
